# frozen_string_literal: true

module Geminize
  module Models
    module CodeExecution
      # Represents executable code generated by the model
      class ExecutableCode
        # Valid language options for executable code
        VALID_LANGUAGES = ["PYTHON"].freeze

        # @return [String] The language of the code (e.g., "PYTHON")
        attr_reader :language

        # @return [String] The code content
        attr_reader :code

        # Initialize a new executable code object
        # @param language [String] The programming language of the code (e.g., "PYTHON")
        # @param code [String] The code content
        # @raise [Geminize::ValidationError] If the executable code is invalid
        def initialize(language, code)
          @language = language
          @code = code
          validate!
        end

        # Validate the executable code
        # @raise [Geminize::ValidationError] If the executable code is invalid
        # @return [Boolean] true if validation passes
        def validate!
          unless @language.is_a?(String)
            raise Geminize::ValidationError.new(
              "Language must be a string, got #{@language.class}",
              "INVALID_ARGUMENT"
            )
          end

          unless VALID_LANGUAGES.include?(@language)
            raise Geminize::ValidationError.new(
              "Invalid language: #{@language}. Must be one of: #{VALID_LANGUAGES.join(", ")}",
              "INVALID_ARGUMENT"
            )
          end

          unless @code.is_a?(String)
            raise Geminize::ValidationError.new(
              "Code must be a string, got #{@code.class}",
              "INVALID_ARGUMENT"
            )
          end

          true
        end

        # Convert the executable code to a hash
        # @return [Hash] The executable code as a hash
        def to_hash
          {
            language: @language,
            code: @code
          }
        end

        # Alias for to_hash
        # @return [Hash] The executable code as a hash
        def to_h
          to_hash
        end
      end
    end
  end
end
